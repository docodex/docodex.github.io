<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>DoCodeX</title>
    <link>https://docodex.github.io/</link>
    <description>Recent content on DoCodeX</description>
    <image>
      <title>DoCodeX</title>
      <url>https://docodex.github.io/images/favicon.jpg</url>
      <link>https://docodex.github.io/images/favicon.jpg</link>
    </image>
    <generator>Hugo -- 0.147.5</generator>
    <language>en-us</language>
    <copyright>DoCodeX</copyright>
    <lastBuildDate>Sun, 25 May 2025 17:51:48 +0800</lastBuildDate>
    <atom:link href="https://docodex.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VSCode Keymap for Mac</title>
      <link>https://docodex.github.io/posts/tech/vscode-keymap-for-mac/</link>
      <pubDate>Tue, 29 Apr 2025 09:47:30 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/vscode-keymap-for-mac/</guid>
      <description>List of almost all VSCode keymap for mac</description>
    </item>
    <item>
      <title>Welcome to Git</title>
      <link>https://docodex.github.io/posts/tech/welcome-to-git/</link>
      <pubDate>Sat, 19 Apr 2025 20:12:48 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/welcome-to-git/</guid>
      <description>Git tips</description>
    </item>
    <item>
      <title>Welcome to Vim</title>
      <link>https://docodex.github.io/posts/tech/welcome-to-vim/</link>
      <pubDate>Mon, 21 Apr 2025 18:53:05 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/welcome-to-vim/</guid>
      <description>Vim tips</description>
    </item>
    <item>
      <title>Go 常用命令</title>
      <link>https://docodex.github.io/posts/tech/go-cmd/</link>
      <pubDate>Fri, 23 May 2025 16:52:52 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/go-cmd/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ go &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Go is a tool &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; managing Go &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; code.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Usage:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	go &amp;lt;command&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;arguments&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The commands are:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	bug         start a bug report
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	build       compile packages and dependencies
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	clean       remove object files and cached files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	doc         show documentation &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; package or symbol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	env         print Go environment information
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	fix         update packages to use new APIs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	fmt         gofmt &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;reformat&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; package sources
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	generate    generate Go files by processing &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	get         add dependencies to current module and install them
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	install     compile and install packages and dependencies
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	list        list packages or modules
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	mod         module maintenance
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	work        workspace maintenance
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	run         compile and run Go program
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	telemetry   manage telemetry data and settings
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt;        &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; packages
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	tool        run specified go tool
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	version     print Go version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	vet         report likely mistakes in packages
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Use &lt;span class=&#34;s2&#34;&gt;&amp;#34;go help &amp;lt;command&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; more information about a command.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Additional &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; topics:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	buildconstraint build constraints
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	buildmode       build modes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	c               calling between Go and C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	cache           build and &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; caching
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	environment     environment variables
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	filetype        file types
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	go.mod          the go.mod file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	gopath          GOPATH environment variable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	goproxy         module proxy protocol
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	importpath      import path syntax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	modules         modules, module versions, and more
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	module-auth     module authentication using go.sum
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	packages        package lists and patterns
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	private         configuration &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; downloading non-public code
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	testflag        testing flags
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	testfunc        testing functions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	vcs             controlling version control with GOVCS
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Use &lt;span class=&#34;s2&#34;&gt;&amp;#34;go help &amp;lt;topic&amp;gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; more information about that topic.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;通用选项&#34;&gt;通用选项&lt;/h2&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;选项&lt;/th&gt;
          &lt;th&gt;作用&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于&lt;strong&gt;强制重新编译所有涉及的 Go 语言代码包&lt;/strong&gt;（包括 Go 语言标准库中的代码包），&lt;strong&gt;即使它们已经是最新的了&lt;/strong&gt;。该标记可以让我们有机会通过改动底层的代码包做一些实验。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-n&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;使命令&lt;strong&gt;仅打印其执行过程中用到的所有命令，而不去真正执行它们&lt;/strong&gt;。如果只想查看或者验证命令的执行过程，而不想改变任何东西，使用它正好合适。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-v&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于&lt;strong&gt;打印命令执行过程中涉及的代码包（列出被编译的代码包名称）&lt;/strong&gt;。这一定包括我们指定的目标代码包，并且有时还会包括该代码包直接或间接依赖的那些代码包。这会让你知道哪些代码包被执行过了。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-work&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于&lt;strong&gt;打印命令执行时生成和使用的临时工作目录的名字，且命令执行完成后不删除它&lt;/strong&gt;。这个目录下的文件可能会对你有用，也可以从侧面了解命令的执行过程。&lt;strong&gt;如果不添加此标记，那么临时工作目录会在命令执行完毕前删除&lt;/strong&gt;。&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-x&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;使命令打印其执行过程中用到的所有命令，&lt;strong&gt;并同时执行它们&lt;/strong&gt;。（而&lt;code&gt;-n&lt;/code&gt;参数是不真正执行它们）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&lt;code&gt;-race&lt;/code&gt;&lt;/td&gt;
          &lt;td&gt;用于&lt;strong&gt;检测并报告指定 Go 语言程序中存在的数据竞争问题&lt;/strong&gt;。当用 Go 语言编写并发程序的时候，这是很重要的检测手段之一。&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;go-run&#34;&gt;&lt;code&gt;go run&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;go run&lt;/code&gt;命令用于编译并运行 Go 程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust 常用 cargo 命令</title>
      <link>https://docodex.github.io/posts/tech/rust-cargo-cmd/</link>
      <pubDate>Sun, 25 May 2025 17:51:48 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/rust-cargo-cmd/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cargo &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Rust&lt;span class=&#34;s1&#34;&gt;&amp;#39;s package manager
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Usage: cargo [+toolchain] [OPTIONS] [COMMAND]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;       cargo [+toolchain] [OPTIONS] -Zscript &amp;lt;MANIFEST_RS&amp;gt; [ARGS]...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -V, --version                  Print version info and exit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --list                     List installed commands
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --explain &amp;lt;CODE&amp;gt;           Provide a detailed explanation of a rustc error message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -v, --verbose...               Use verbose output (-vv very verbose/build.rs output)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -q, --quiet                    Do not print cargo log messages
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --color &amp;lt;WHEN&amp;gt;             Coloring [possible values: auto, always, never]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -C &amp;lt;DIRECTORY&amp;gt;                 Change to DIRECTORY before doing anything (nightly-only)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --locked                   Assert that `Cargo.lock` will remain unchanged
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --offline                  Run without accessing the network
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --frozen                   Equivalent to specifying both --locked and --offline
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;      --config &amp;lt;KEY=VALUE|PATH&amp;gt;  Override a configuration value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -Z &amp;lt;FLAG&amp;gt;                      Unstable (nightly-only) flags to Cargo, see &amp;#39;&lt;/span&gt;cargo -Z help&lt;span class=&#34;s1&#34;&gt;&amp;#39; for details
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  -h, --help                     Print help
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;Commands:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    build, b    Compile the current package
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    check, c    Analyze the current package and report errors, but don&amp;#39;&lt;/span&gt;t build object files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    clean       Remove the target directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    doc, d      Build this package&lt;span class=&#34;s1&#34;&gt;&amp;#39;s and its dependencies&amp;#39;&lt;/span&gt; documentation
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    new         Create a new cargo package
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    init        Create a new cargo package in an existing directory
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    add         Add dependencies to a manifest file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    remove      Remove dependencies from a manifest file
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    run, r      Run a binary or example of the &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; package
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    test, t     Run the tests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    bench       Run the benchmarks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    update      Update dependencies listed in Cargo.lock
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    search      Search registry &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; crates
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    publish     Package and upload this package to the registry
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    install     Install a Rust binary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    uninstall   Uninstall a Rust binary
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...         See all commands with --list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;See &lt;span class=&#34;s1&#34;&gt;&amp;#39;cargo help &amp;lt;command&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; more information on a specific command.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cargo-new&#34;&gt;&lt;code&gt;cargo new&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;cargo new&lt;/code&gt;命令用来&lt;strong&gt;创建&lt;/strong&gt;一个新的 Rust 项目：&lt;/p&gt;</description>
    </item>
    <item>
      <title>数字编码</title>
      <link>https://docodex.github.io/posts/tech/number/</link>
      <pubDate>Thu, 15 May 2025 16:16:19 +0800</pubDate>
      <guid>https://docodex.github.io/posts/tech/number/</guid>
      <description>&lt;p&gt;在计算机基础中，原码、反码、补码和移码都是用于表示和处理有符号整数的编码方式。它们各自具有不同的定义和用途。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原码直接使用二进制表示数值，并用最高位表示符号位（0 表示正数，1 表示负数）。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;正数的原码是其二进制本身；负数的原码是符号位为 1，数值部分取其绝对值的二进制。例如，使用 8 位二进制表示，+3 的原码为 00000011，-3 的原码为 10000011。&lt;/li&gt;
&lt;li&gt;原码的优点是直观，容易理解。然而，原码的缺点是加法和减法运算复杂，需要额外的规则来处理符号位。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反码是将正数保持不变，负数按位取反（符号位不变）。符号位仍然存在，仍然用最高位表示。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;正数的反码和原码相同；负数是符号位为 1，其它位是原码取反。例如，+3 的反码仍为 00000011，-3 的反码为 11111100。&lt;/li&gt;
&lt;li&gt;反码的优点是加减法运算规则简单，只需对应位相加并进位。然而，反码的缺点是存在两个零值：正零和负零。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;补码是将反码中的正数保持不变，负数按位取反（符号位不变）再加 1。符号位仍然存在，仍然用最高位表示。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;为了解决反码的正零和负零问题，补码被引入。&lt;/li&gt;
&lt;li&gt;正数的补码和原码，反码相同；负数是符号位为 1，其它位是原码取反，末位加 1。例如，+3 的补码仍为 00000011，-3 的补码为 11111101。&lt;/li&gt;
&lt;li&gt;补码的优点是只有一个零值，可以直接进行加减运算，而不需要额外的规则。补码还有一个重要的特性是能够通过减法运算实现加法，从而简化了计算机的逻辑电路设计。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;用一张图表示如下：
&lt;img loading=&#34;lazy&#34; src=&#34;./images/number-1.png&#34; alt=&#34;原码、反码、补码&#34;  /&gt;
&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://docodex.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://docodex.github.io/about/</guid>
      <description>about</description>
    </item>
  </channel>
</rss>
